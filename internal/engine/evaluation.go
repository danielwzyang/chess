package engine

import (
	"math"

	"danielyang.cc/chess/internal/board"
)

var (
	pieceWeights = map[byte]float64{
		'P': 1.0,
		'N': 3.0,
		'B': 3.0,
		'R': 5.0,
		'Q': 9.0,
	}
	mobilityWeight = 0.1

	pieceScoreTables = map[string][8][8]float64{
		"wP": {
			{0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8},
			{0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7},
			{0.3, 0.3, 0.4, 0.5, 0.5, 0.4, 0.3, 0.3},
			{0.25, 0.25, 0.3, 0.45, 0.45, 0.3, 0.25, 0.25},
			{0.2, 0.2, 0.2, 0.4, 0.4, 0.2, 0.2, 0.2},
			{0.25, 0.15, 0.1, 0.2, 0.2, 0.1, 0.15, 0.25},
			{0.25, 0.3, 0.3, 0.0, 0.0, 0.3, 0.3, 0.25},
			{0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2},
		},
		"bP": {
			{0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2},
			{0.25, 0.3, 0.3, 0.0, 0.0, 0.3, 0.3, 0.25},
			{0.25, 0.15, 0.1, 0.2, 0.2, 0.1, 0.15, 0.25},
			{0.2, 0.2, 0.2, 0.4, 0.4, 0.2, 0.2, 0.2},
			{0.25, 0.25, 0.3, 0.45, 0.45, 0.3, 0.25, 0.25},
			{0.3, 0.3, 0.4, 0.5, 0.5, 0.4, 0.3, 0.3},
			{0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7},
			{0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8},
		},
		"wN": {
			{0.0, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.0},
			{0.1, 0.3, 0.5, 0.5, 0.5, 0.5, 0.3, 0.1},
			{0.2, 0.5, 0.6, 0.65, 0.65, 0.6, 0.5, 0.2},
			{0.2, 0.55, 0.65, 0.7, 0.7, 0.65, 0.55, 0.2},
			{0.2, 0.5, 0.65, 0.7, 0.7, 0.65, 0.5, 0.2},
			{0.2, 0.55, 0.6, 0.65, 0.65, 0.6, 0.55, 0.2},
			{0.1, 0.3, 0.5, 0.55, 0.55, 0.5, 0.3, 0.1},
			{0.0, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.0},
		},
		"bN": {
			{0.0, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.0},
			{0.1, 0.3, 0.5, 0.55, 0.55, 0.5, 0.3, 0.1},
			{0.2, 0.55, 0.6, 0.65, 0.65, 0.6, 0.55, 0.2},
			{0.2, 0.5, 0.65, 0.7, 0.7, 0.65, 0.5, 0.2},
			{0.2, 0.55, 0.65, 0.7, 0.7, 0.65, 0.55, 0.2},
			{0.2, 0.5, 0.6, 0.65, 0.65, 0.6, 0.5, 0.2},
			{0.1, 0.3, 0.5, 0.5, 0.5, 0.5, 0.3, 0.1},
			{0.0, 0.1, 0.2, 0.2, 0.2, 0.2, 0.1, 0.0},
		},
		"wB": {
			{0.0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.0},
			{0.2, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.2},
			{0.2, 0.4, 0.5, 0.6, 0.6, 0.5, 0.4, 0.2},
			{0.2, 0.5, 0.5, 0.6, 0.6, 0.5, 0.5, 0.2},
			{0.2, 0.4, 0.6, 0.6, 0.6, 0.6, 0.4, 0.2},
			{0.2, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.2},
			{0.2, 0.5, 0.4, 0.4, 0.4, 0.4, 0.5, 0.2},
			{0.0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.0},
		},
		"bB": {
			{0.0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.0},
			{0.2, 0.5, 0.4, 0.4, 0.4, 0.4, 0.5, 0.2},
			{0.2, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.2},
			{0.2, 0.4, 0.6, 0.6, 0.6, 0.6, 0.4, 0.2},
			{0.2, 0.5, 0.5, 0.6, 0.6, 0.5, 0.5, 0.2},
			{0.2, 0.4, 0.5, 0.6, 0.6, 0.5, 0.4, 0.2},
			{0.2, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.2},
			{0.0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.0},
		},
		"wR": {
			{0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25},
			{0.5, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.5},
			{0.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.0},
			{0.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.0},
			{0.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.0},
			{0.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.0},
			{0.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.0},
			{0.25, 0.25, 0.25, 0.5, 0.5, 0.25, 0.25, 0.25},
		},
		"bR": {
			{0.25, 0.25, 0.25, 0.5, 0.5, 0.25, 0.25, 0.25},
			{0.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.0},
			{0.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.0},
			{0.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.0},
			{0.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.0},
			{0.0, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.0},
			{0.5, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.5},
			{0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25},
		},
		"wQ": {
			{0.0, 0.2, 0.2, 0.3, 0.3, 0.2, 0.2, 0.0},
			{0.2, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.2},
			{0.2, 0.4, 0.5, 0.5, 0.5, 0.5, 0.4, 0.2},
			{0.3, 0.4, 0.5, 0.5, 0.5, 0.5, 0.4, 0.3},
			{0.4, 0.4, 0.5, 0.5, 0.5, 0.5, 0.4, 0.3},
			{0.2, 0.5, 0.5, 0.5, 0.5, 0.5, 0.4, 0.2},
			{0.2, 0.4, 0.5, 0.4, 0.4, 0.4, 0.4, 0.2},
			{0.0, 0.2, 0.2, 0.3, 0.3, 0.2, 0.2, 0.0},
		},
		"bQ": {
			{0.0, 0.2, 0.2, 0.3, 0.3, 0.2, 0.2, 0.0},
			{0.2, 0.4, 0.5, 0.4, 0.4, 0.4, 0.4, 0.2},
			{0.2, 0.5, 0.5, 0.5, 0.5, 0.5, 0.4, 0.2},
			{0.4, 0.4, 0.5, 0.5, 0.5, 0.5, 0.4, 0.3},
			{0.3, 0.4, 0.5, 0.5, 0.5, 0.5, 0.4, 0.3},
			{0.2, 0.4, 0.5, 0.5, 0.5, 0.5, 0.4, 0.2},
			{0.2, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.2},
			{0.0, 0.2, 0.2, 0.3, 0.3, 0.2, 0.2, 0.0},
		},
	}
)

func Evaluate(color byte) float64 {
	multiplier := 1.0
	if color == 'b' {
		multiplier = -1.0
	}

	if board.Checkmate('w') || board.Checkmate('b') {
		return math.Inf(int(multiplier))
	}

	if board.Draw('w') || board.Draw('b') {
		return 0
	}

	return (material() + mobility() + pieceSquareTables()) * multiplier
}

func pieceSquareTables() float64 {
	score := 0.0

	for r, row := range board.Board {
		for c, piece := range row {
			if piece != " " && piece[1] != 'K' {
				if piece[0] == 'w' {
					score += pieceScoreTables[piece][r][c]
				} else {
					score -= pieceScoreTables[piece][r][c]
				}
			}
		}
	}

	return score
}

func material() float64 {
	score := 0.0

	for _, row := range board.Board {
		for _, piece := range row {
			if piece != " " && piece[1] != 'K' {
				if piece[0] == 'w' {
					score += pieceWeights[piece[1]]
				} else {
					score -= pieceWeights[piece[1]]
				}
			}
		}
	}

	return score
}

func mobility() float64 {
	_, wn := board.GetAllValidMoves('w')
	_, bn := board.GetAllValidMoves('b')
	return float64(wn-bn) * mobilityWeight
}
